{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Code War Train: Regex Password Validity "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You need to write regex that will validate a password to make sure it meets the following criteria:\n",
    "\n",
    "At least six characters long\n",
    "contains a lowercase letter\n",
    "contains an uppercase letter\n",
    "contains a number\n",
    "Valid passwords will only be alphanumeric characters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import string\n",
    "a = list(string.ascii_lowercase[0:26])\n",
    "a\n",
    "list(range(0,10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import string\n",
    "alph_lower = list(string.ascii_lowercase[0:26])\n",
    "alph_upper = list(string.ascii_uppercase[0:26])\n",
    "number = list(range(0,10))\n",
    "count = 0 \n",
    "length = len(regex)\n",
    "index = 0\n",
    "def regex:\n",
    "    if length < 6:\n",
    "        return False\n",
    "    else:\n",
    "        while count == 0 & index < length:\n",
    "            temp = alph_lower.count(regex[index])\n",
    "            count += temp\n",
    "            index += 1\n",
    "        if count == 0:\n",
    "            return False\n",
    "        else:\n",
    "            count = 0\n",
    "            index = 0\n",
    "            while count == 0 & index < length:\n",
    "                temp = alph_upper.count(regex[index])\n",
    "                count += temp\n",
    "                index += 1\n",
    "            if count == 0:\n",
    "                return False\n",
    "            else:\n",
    "                count = 0\n",
    "                index = 0\n",
    "                while count == 0& index < lenght:\n",
    "                    temp = number.count(regex[index])\n",
    "                    count += temp\n",
    "                    index += 1\n",
    "                    if count == 0: return False\n",
    "                    else: return True"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
